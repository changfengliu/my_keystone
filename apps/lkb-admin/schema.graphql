# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  nickname: String
  phone: String
  email: String
  avatar: ImageFieldOutput
  gender: Int
  birthday: DateTime
  password: PasswordState
  openid: String
  createdAt: DateTime
  lastLoginAt: DateTime
  address: String
  remark: String
  userType: String
  status: Int
  lastLoginIP: String
  loginCount: Int
}

type ImageFieldOutput {
  id: ID!
  url: String!
  extension: ImageExtension!
  filesize: Int!
  width: Int!
  height: Int!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  phone: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  nickname: StringFilter
  phone: StringFilter
  email: StringFilter
  gender: IntFilter
  birthday: DateTimeNullableFilter
  openid: StringFilter
  createdAt: DateTimeNullableFilter
  lastLoginAt: DateTimeNullableFilter
  address: StringFilter
  remark: StringFilter
  userType: StringFilter
  status: IntFilter
  lastLoginIP: StringFilter
  loginCount: IntNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  nickname: OrderDirection
  phone: OrderDirection
  email: OrderDirection
  gender: OrderDirection
  birthday: OrderDirection
  openid: OrderDirection
  createdAt: OrderDirection
  lastLoginAt: OrderDirection
  address: OrderDirection
  remark: OrderDirection
  userType: OrderDirection
  status: OrderDirection
  lastLoginIP: OrderDirection
  loginCount: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  nickname: String
  phone: String
  email: String
  avatar: ImageFieldInput
  gender: Int
  birthday: DateTime
  password: String
  openid: String
  createdAt: DateTime
  lastLoginAt: DateTime
  address: String
  remark: String
  userType: String
  status: Int
  lastLoginIP: String
  loginCount: Int
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  nickname: String
  phone: String
  email: String
  avatar: ImageFieldInput
  gender: Int
  birthday: DateTime
  password: String
  openid: String
  createdAt: DateTime
  lastLoginAt: DateTime
  address: String
  remark: String
  userType: String
  status: Int
  lastLoginIP: String
  loginCount: Int
}

type Article {
  id: ID!
  title: String
  content: Article_content_Document
  publishedAt: DateTime
  status: String
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Article_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ArticleWhereUniqueInput {
  id: ID
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  id: IDFilter
  title: StringFilter
  publishedAt: DateTimeNullableFilter
  status: StringNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: StringNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ArticleOrderByInput {
  id: OrderDirection
  title: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input ArticleUpdateInput {
  title: String
  content: JSON
  publishedAt: DateTime
  status: String
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ArticleUpdateArgs {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateInput!
}

input ArticleCreateInput {
  title: String
  content: JSON
  publishedAt: DateTime
  status: String
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: ArticleWhereInput! = {}, orderBy: [ArticleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ArticleWhereUniqueInput): [Article!]
  postsCount(where: ArticleWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: ArticleManyRelationFilter
}

input ArticleManyRelationFilter {
  every: ArticleWhereInput
  some: ArticleWhereInput
  none: ArticleWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: ArticleRelateToManyForUpdateInput
}

input ArticleRelateToManyForUpdateInput {
  disconnect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: ArticleRelateToManyForCreateInput
}

input ArticleRelateToManyForCreateInput {
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
}

type Menu {
  id: ID!
  name: String
  icon: String
  type: String
  path: String
  parent: Menu
  sort: Int
  isEnabled: Int
}

input MenuWhereUniqueInput {
  id: ID
}

input MenuWhereInput {
  AND: [MenuWhereInput!]
  OR: [MenuWhereInput!]
  NOT: [MenuWhereInput!]
  id: IDFilter
  name: StringFilter
  icon: StringFilter
  type: StringNullableFilter
  path: StringFilter
  parent: MenuWhereInput
  sort: IntNullableFilter
  isEnabled: IntNullableFilter
}

input MenuOrderByInput {
  id: OrderDirection
  name: OrderDirection
  icon: OrderDirection
  type: OrderDirection
  path: OrderDirection
  sort: OrderDirection
  isEnabled: OrderDirection
}

input MenuUpdateInput {
  name: String
  icon: String
  type: String
  path: String
  parent: MenuRelateToOneForUpdateInput
  sort: Int
  isEnabled: Int
}

input MenuRelateToOneForUpdateInput {
  create: MenuCreateInput
  connect: MenuWhereUniqueInput
  disconnect: Boolean
}

input MenuUpdateArgs {
  where: MenuWhereUniqueInput!
  data: MenuUpdateInput!
}

input MenuCreateInput {
  name: String
  icon: String
  type: String
  path: String
  parent: MenuRelateToOneForCreateInput
  sort: Int
  isEnabled: Int
}

input MenuRelateToOneForCreateInput {
  create: MenuCreateInput
  connect: MenuWhereUniqueInput
}

type App {
  id: ID!
  name: String
  description: String
  logo: String
  type: String
  domain: String
  isEnabled: Int
}

input AppWhereUniqueInput {
  id: ID
}

input AppWhereInput {
  AND: [AppWhereInput!]
  OR: [AppWhereInput!]
  NOT: [AppWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  logo: StringFilter
  type: StringNullableFilter
  domain: StringFilter
  isEnabled: IntNullableFilter
}

input AppOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  logo: OrderDirection
  type: OrderDirection
  domain: OrderDirection
  isEnabled: OrderDirection
}

input AppUpdateInput {
  name: String
  description: String
  logo: String
  type: String
  domain: String
  isEnabled: Int
}

input AppUpdateArgs {
  where: AppWhereUniqueInput!
  data: AppUpdateInput!
}

input AppCreateInput {
  name: String
  description: String
  logo: String
  type: String
  domain: String
  isEnabled: Int
}

type WechatUser {
  id: ID!
  openid: String
  unionid: String
  sessionKey: String
  user: User
}

input WechatUserWhereUniqueInput {
  id: ID
  openid: String
}

input WechatUserWhereInput {
  AND: [WechatUserWhereInput!]
  OR: [WechatUserWhereInput!]
  NOT: [WechatUserWhereInput!]
  id: IDFilter
  openid: StringFilter
  unionid: StringFilter
  sessionKey: StringFilter
  user: UserWhereInput
}

input WechatUserOrderByInput {
  id: OrderDirection
  openid: OrderDirection
  unionid: OrderDirection
  sessionKey: OrderDirection
}

input WechatUserUpdateInput {
  openid: String
  unionid: String
  sessionKey: String
  user: UserRelateToOneForUpdateInput
}

input WechatUserUpdateArgs {
  where: WechatUserWhereUniqueInput!
  data: WechatUserUpdateInput!
}

input WechatUserCreateInput {
  openid: String
  unionid: String
  sessionKey: String
  user: UserRelateToOneForCreateInput
}

type ProductCategory {
  id: ID!
  name: String
  description: String
  status: String
  order: Int
  parentCategory: ProductCategory
}

input ProductCategoryWhereUniqueInput {
  id: ID
  name: String
}

input ProductCategoryWhereInput {
  AND: [ProductCategoryWhereInput!]
  OR: [ProductCategoryWhereInput!]
  NOT: [ProductCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  status: StringNullableFilter
  order: IntNullableFilter
  parentCategory: ProductCategoryWhereInput
}

input ProductCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
  order: OrderDirection
}

input ProductCategoryUpdateInput {
  name: String
  description: String
  status: String
  order: Int
  parentCategory: ProductCategoryRelateToOneForUpdateInput
}

input ProductCategoryRelateToOneForUpdateInput {
  create: ProductCategoryCreateInput
  connect: ProductCategoryWhereUniqueInput
  disconnect: Boolean
}

input ProductCategoryUpdateArgs {
  where: ProductCategoryWhereUniqueInput!
  data: ProductCategoryUpdateInput!
}

input ProductCategoryCreateInput {
  name: String
  description: String
  status: String
  order: Int
  parentCategory: ProductCategoryRelateToOneForCreateInput
}

input ProductCategoryRelateToOneForCreateInput {
  create: ProductCategoryCreateInput
  connect: ProductCategoryWhereUniqueInput
}

type Product {
  id: ID!
  name: String
  sku: String
  price: Int
  stock: Int
  category: ProductCategory
  status: String
  cover: ImageFieldOutput
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  description: Product_description_Document
  order: Int
}

type Product_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProductWhereUniqueInput {
  id: ID
  name: String
  sku: String
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  sku: StringFilter
  price: IntFilter
  stock: IntFilter
  category: ProductCategoryWhereInput
  status: StringNullableFilter
  images: ImageManyRelationFilter
  order: IntNullableFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  sku: OrderDirection
  price: OrderDirection
  stock: OrderDirection
  status: OrderDirection
  order: OrderDirection
}

input ProductUpdateInput {
  name: String
  sku: String
  price: Int
  stock: Int
  category: ProductCategoryRelateToOneForUpdateInput
  status: String
  cover: ImageFieldInput
  images: ImageRelateToManyForUpdateInput
  description: JSON
  order: Int
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  sku: String
  price: Int
  stock: Int
  category: ProductCategoryRelateToOneForCreateInput
  status: String
  cover: ImageFieldInput
  images: ImageRelateToManyForCreateInput
  description: JSON
  order: Int
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
}

type Cart {
  id: ID!
  user: User
  items(where: CartItemWhereInput! = {}, orderBy: [CartItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CartItemWhereUniqueInput): [CartItem!]
  itemsCount(where: CartItemWhereInput! = {}): Int
  totalAmount: Int
  status: String
  updatedAt: DateTime
}

input CartWhereUniqueInput {
  id: ID
}

input CartWhereInput {
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  id: IDFilter
  user: UserWhereInput
  items: CartItemManyRelationFilter
  totalAmount: IntNullableFilter
  status: StringNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CartItemManyRelationFilter {
  every: CartItemWhereInput
  some: CartItemWhereInput
  none: CartItemWhereInput
}

input CartOrderByInput {
  id: OrderDirection
  totalAmount: OrderDirection
  status: OrderDirection
  updatedAt: OrderDirection
}

input CartUpdateInput {
  user: UserRelateToOneForUpdateInput
  items: CartItemRelateToManyForUpdateInput
  totalAmount: Int
  status: String
  updatedAt: DateTime
}

input CartItemRelateToManyForUpdateInput {
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input CartUpdateArgs {
  where: CartWhereUniqueInput!
  data: CartUpdateInput!
}

input CartCreateInput {
  user: UserRelateToOneForCreateInput
  items: CartItemRelateToManyForCreateInput
  totalAmount: Int
  status: String
  updatedAt: DateTime
}

input CartItemRelateToManyForCreateInput {
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
}

type CartItem {
  id: ID!
  cart: Cart
  product: Product
  quantity: Int
  price: Int
  amount: Int
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  cart: CartWhereInput
  product: ProductWhereInput
  quantity: IntFilter
  price: IntFilter
  amount: IntFilter
}

input CartItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
  price: OrderDirection
  amount: OrderDirection
}

input CartItemUpdateInput {
  cart: CartRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
  quantity: Int
  price: Int
  amount: Int
}

input CartRelateToOneForUpdateInput {
  create: CartCreateInput
  connect: CartWhereUniqueInput
  disconnect: Boolean
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  cart: CartRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
  quantity: Int
  price: Int
  amount: Int
}

input CartRelateToOneForCreateInput {
  create: CartCreateInput
  connect: CartWhereUniqueInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type Service {
  id: ID!
  title: String
  price: Int
  duration: Int
  status: String
  serviceCategory: ServiceCategory
  order: Int
  cover: ImageFieldOutput
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  content: Service_content_Document
}

type Service_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ServiceWhereUniqueInput {
  id: ID
  title: String
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  title: StringFilter
  price: IntFilter
  duration: IntFilter
  status: StringNullableFilter
  serviceCategory: ServiceCategoryWhereInput
  order: IntFilter
  images: ImageManyRelationFilter
}

input ServiceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  price: OrderDirection
  duration: OrderDirection
  status: OrderDirection
  order: OrderDirection
}

input ServiceUpdateInput {
  title: String
  price: Int
  duration: Int
  status: String
  serviceCategory: ServiceCategoryRelateToOneForUpdateInput
  order: Int
  cover: ImageFieldInput
  images: ImageRelateToManyForUpdateInput
  content: JSON
}

input ServiceCategoryRelateToOneForUpdateInput {
  create: ServiceCategoryCreateInput
  connect: ServiceCategoryWhereUniqueInput
  disconnect: Boolean
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  title: String
  price: Int
  duration: Int
  status: String
  serviceCategory: ServiceCategoryRelateToOneForCreateInput
  order: Int
  cover: ImageFieldInput
  images: ImageRelateToManyForCreateInput
  content: JSON
}

input ServiceCategoryRelateToOneForCreateInput {
  create: ServiceCategoryCreateInput
  connect: ServiceCategoryWhereUniqueInput
}

type ServiceCategory {
  id: ID!
  name: String
  status: String
  order: Int
}

input ServiceCategoryWhereUniqueInput {
  id: ID
  name: String
}

input ServiceCategoryWhereInput {
  AND: [ServiceCategoryWhereInput!]
  OR: [ServiceCategoryWhereInput!]
  NOT: [ServiceCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  status: StringNullableFilter
  order: IntFilter
}

input ServiceCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  order: OrderDirection
}

input ServiceCategoryUpdateInput {
  name: String
  status: String
  order: Int
}

input ServiceCategoryUpdateArgs {
  where: ServiceCategoryWhereUniqueInput!
  data: ServiceCategoryUpdateInput!
}

input ServiceCategoryCreateInput {
  name: String
  status: String
  order: Int
}

type Employee {
  id: ID!
  name: String
  phone: String
  avatar: ImageFieldOutput
  shop: Shop
  role: String
  status: String
  skills: String
  joinDate: DateTime
  leaveDate: DateTime
  remark: String
}

input EmployeeWhereUniqueInput {
  id: ID
  phone: String
}

input EmployeeWhereInput {
  AND: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
  id: IDFilter
  name: StringFilter
  phone: StringFilter
  shop: ShopWhereInput
  role: StringNullableFilter
  status: StringNullableFilter
  skills: StringFilter
  joinDate: DateTimeNullableFilter
  leaveDate: DateTimeNullableFilter
  remark: StringFilter
}

input EmployeeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  phone: OrderDirection
  role: OrderDirection
  status: OrderDirection
  skills: OrderDirection
  joinDate: OrderDirection
  leaveDate: OrderDirection
  remark: OrderDirection
}

input EmployeeUpdateInput {
  name: String
  phone: String
  avatar: ImageFieldInput
  shop: ShopRelateToOneForUpdateInput
  role: String
  status: String
  skills: String
  joinDate: DateTime
  leaveDate: DateTime
  remark: String
}

input ShopRelateToOneForUpdateInput {
  create: ShopCreateInput
  connect: ShopWhereUniqueInput
  disconnect: Boolean
}

input EmployeeUpdateArgs {
  where: EmployeeWhereUniqueInput!
  data: EmployeeUpdateInput!
}

input EmployeeCreateInput {
  name: String
  phone: String
  avatar: ImageFieldInput
  shop: ShopRelateToOneForCreateInput
  role: String
  status: String
  skills: String
  joinDate: DateTime
  leaveDate: DateTime
  remark: String
}

input ShopRelateToOneForCreateInput {
  create: ShopCreateInput
  connect: ShopWhereUniqueInput
}

type Shop {
  id: ID!
  name: String
  address: String
  phone: String
  location: String
  locationLabel: String
  parent: Shop
  subShops(where: ShopWhereInput! = {}, orderBy: [ShopOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ShopWhereUniqueInput): [Shop!]
  subShopsCount(where: ShopWhereInput! = {}): Int
  logo: ImageFieldOutput
  banners(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  bannersCount(where: ImageWhereInput! = {}): Int
  openingHours: String
  remark: String
}

input ShopWhereUniqueInput {
  id: ID
  name: String
}

input ShopWhereInput {
  AND: [ShopWhereInput!]
  OR: [ShopWhereInput!]
  NOT: [ShopWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  phone: StringFilter
  location: StringFilter
  locationLabel: StringFilter
  parent: ShopWhereInput
  subShops: ShopManyRelationFilter
  banners: ImageManyRelationFilter
  openingHours: StringFilter
  remark: StringFilter
}

input ShopManyRelationFilter {
  every: ShopWhereInput
  some: ShopWhereInput
  none: ShopWhereInput
}

input ShopOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  phone: OrderDirection
  location: OrderDirection
  locationLabel: OrderDirection
  openingHours: OrderDirection
  remark: OrderDirection
}

input ShopUpdateInput {
  name: String
  address: String
  phone: String
  location: String
  locationLabel: String
  parent: ShopRelateToOneForUpdateInput
  subShops: ShopRelateToManyForUpdateInput
  logo: ImageFieldInput
  banners: ImageRelateToManyForUpdateInput
  openingHours: String
  remark: String
}

input ShopRelateToManyForUpdateInput {
  disconnect: [ShopWhereUniqueInput!]
  set: [ShopWhereUniqueInput!]
  create: [ShopCreateInput!]
  connect: [ShopWhereUniqueInput!]
}

input ShopUpdateArgs {
  where: ShopWhereUniqueInput!
  data: ShopUpdateInput!
}

input ShopCreateInput {
  name: String
  address: String
  phone: String
  location: String
  locationLabel: String
  parent: ShopRelateToOneForCreateInput
  subShops: ShopRelateToManyForCreateInput
  logo: ImageFieldInput
  banners: ImageRelateToManyForCreateInput
  openingHours: String
  remark: String
}

input ShopRelateToManyForCreateInput {
  create: [ShopCreateInput!]
  connect: [ShopWhereUniqueInput!]
  set: [ShopWhereUniqueInput!]
}

type CardType {
  id: ID!
  name: String
  type: String
  cover: ImageFieldOutput
  price: Int
  count: Int
  discount: Int
  duration: Int
  rules: JSON
  status: String
  description: String
}

input CardTypeWhereUniqueInput {
  id: ID
  name: String
}

input CardTypeWhereInput {
  AND: [CardTypeWhereInput!]
  OR: [CardTypeWhereInput!]
  NOT: [CardTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  type: StringFilter
  price: IntFilter
  count: IntNullableFilter
  discount: IntNullableFilter
  duration: IntNullableFilter
  status: StringFilter
  description: StringFilter
}

input CardTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  price: OrderDirection
  count: OrderDirection
  discount: OrderDirection
  duration: OrderDirection
  status: OrderDirection
  description: OrderDirection
}

input CardTypeUpdateInput {
  name: String
  type: String
  cover: ImageFieldInput
  price: Int
  count: Int
  discount: Int
  duration: Int
  rules: JSON
  status: String
  description: String
}

input CardTypeUpdateArgs {
  where: CardTypeWhereUniqueInput!
  data: CardTypeUpdateInput!
}

input CardTypeCreateInput {
  name: String
  type: String
  cover: ImageFieldInput
  price: Int
  count: Int
  discount: Int
  duration: Int
  rules: JSON
  status: String
  description: String
}

type MembershipCard {
  id: ID!
  user: User
  cardType: CardType
  balance: Int
  remainingCount: Int
  status: String
  expiryDate: DateTime
  purchaseDate: DateTime
}

input MembershipCardWhereUniqueInput {
  id: ID
}

input MembershipCardWhereInput {
  AND: [MembershipCardWhereInput!]
  OR: [MembershipCardWhereInput!]
  NOT: [MembershipCardWhereInput!]
  id: IDFilter
  user: UserWhereInput
  cardType: CardTypeWhereInput
  balance: IntNullableFilter
  remainingCount: IntNullableFilter
  status: StringFilter
  expiryDate: DateTimeNullableFilter
  purchaseDate: DateTimeNullableFilter
}

input MembershipCardOrderByInput {
  id: OrderDirection
  balance: OrderDirection
  remainingCount: OrderDirection
  status: OrderDirection
  expiryDate: OrderDirection
  purchaseDate: OrderDirection
}

input MembershipCardUpdateInput {
  user: UserRelateToOneForUpdateInput
  cardType: CardTypeRelateToOneForUpdateInput
  balance: Int
  remainingCount: Int
  status: String
  expiryDate: DateTime
  purchaseDate: DateTime
}

input CardTypeRelateToOneForUpdateInput {
  create: CardTypeCreateInput
  connect: CardTypeWhereUniqueInput
  disconnect: Boolean
}

input MembershipCardUpdateArgs {
  where: MembershipCardWhereUniqueInput!
  data: MembershipCardUpdateInput!
}

input MembershipCardCreateInput {
  user: UserRelateToOneForCreateInput
  cardType: CardTypeRelateToOneForCreateInput
  balance: Int
  remainingCount: Int
  status: String
  expiryDate: DateTime
  purchaseDate: DateTime
}

input CardTypeRelateToOneForCreateInput {
  create: CardTypeCreateInput
  connect: CardTypeWhereUniqueInput
}

type CardConsumptionRecord {
  id: ID!
  card: MembershipCard
  service: Service
  originalAmount: Int
  discountedAmount: Int
  consumedCount: Int
  consumedAt: DateTime
  note: String
}

input CardConsumptionRecordWhereUniqueInput {
  id: ID
}

input CardConsumptionRecordWhereInput {
  AND: [CardConsumptionRecordWhereInput!]
  OR: [CardConsumptionRecordWhereInput!]
  NOT: [CardConsumptionRecordWhereInput!]
  id: IDFilter
  card: MembershipCardWhereInput
  service: ServiceWhereInput
  originalAmount: IntFilter
  discountedAmount: IntFilter
  consumedCount: IntNullableFilter
  consumedAt: DateTimeNullableFilter
  note: StringFilter
}

input CardConsumptionRecordOrderByInput {
  id: OrderDirection
  originalAmount: OrderDirection
  discountedAmount: OrderDirection
  consumedCount: OrderDirection
  consumedAt: OrderDirection
  note: OrderDirection
}

input CardConsumptionRecordUpdateInput {
  card: MembershipCardRelateToOneForUpdateInput
  service: ServiceRelateToOneForUpdateInput
  originalAmount: Int
  discountedAmount: Int
  consumedCount: Int
  consumedAt: DateTime
  note: String
}

input MembershipCardRelateToOneForUpdateInput {
  create: MembershipCardCreateInput
  connect: MembershipCardWhereUniqueInput
  disconnect: Boolean
}

input ServiceRelateToOneForUpdateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
  disconnect: Boolean
}

input CardConsumptionRecordUpdateArgs {
  where: CardConsumptionRecordWhereUniqueInput!
  data: CardConsumptionRecordUpdateInput!
}

input CardConsumptionRecordCreateInput {
  card: MembershipCardRelateToOneForCreateInput
  service: ServiceRelateToOneForCreateInput
  originalAmount: Int
  discountedAmount: Int
  consumedCount: Int
  consumedAt: DateTime
  note: String
}

input MembershipCardRelateToOneForCreateInput {
  create: MembershipCardCreateInput
  connect: MembershipCardWhereUniqueInput
}

input ServiceRelateToOneForCreateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
}

type Image {
  id: ID!
  name: String
  altText: String
  image: ImageFieldOutput
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  name: StringFilter
  altText: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  altText: OrderDirection
}

input ImageUpdateInput {
  name: String
  altText: String
  image: ImageFieldInput
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  name: String
  altText: String
  image: ImageFieldInput
}

type Album {
  id: ID!
  name: String
  desc: String
  cover: ImageFieldOutput
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
}

input AlbumWhereUniqueInput {
  id: ID
}

input AlbumWhereInput {
  AND: [AlbumWhereInput!]
  OR: [AlbumWhereInput!]
  NOT: [AlbumWhereInput!]
  id: IDFilter
  name: StringFilter
  desc: StringFilter
  images: ImageManyRelationFilter
}

input AlbumOrderByInput {
  id: OrderDirection
  name: OrderDirection
  desc: OrderDirection
}

input AlbumUpdateInput {
  name: String
  desc: String
  cover: ImageFieldInput
  images: ImageRelateToManyForUpdateInput
}

input AlbumUpdateArgs {
  where: AlbumWhereUniqueInput!
  data: AlbumUpdateInput!
}

input AlbumCreateInput {
  name: String
  desc: String
  cover: ImageFieldInput
  images: ImageRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createArticle(data: ArticleCreateInput!): Article
  createArticles(data: [ArticleCreateInput!]!): [Article]
  updateArticle(where: ArticleWhereUniqueInput!, data: ArticleUpdateInput!): Article
  updateArticles(data: [ArticleUpdateArgs!]!): [Article]
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteArticles(where: [ArticleWhereUniqueInput!]!): [Article]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createMenu(data: MenuCreateInput!): Menu
  createMenus(data: [MenuCreateInput!]!): [Menu]
  updateMenu(where: MenuWhereUniqueInput!, data: MenuUpdateInput!): Menu
  updateMenus(data: [MenuUpdateArgs!]!): [Menu]
  deleteMenu(where: MenuWhereUniqueInput!): Menu
  deleteMenus(where: [MenuWhereUniqueInput!]!): [Menu]
  createApp(data: AppCreateInput!): App
  createApps(data: [AppCreateInput!]!): [App]
  updateApp(where: AppWhereUniqueInput!, data: AppUpdateInput!): App
  updateApps(data: [AppUpdateArgs!]!): [App]
  deleteApp(where: AppWhereUniqueInput!): App
  deleteApps(where: [AppWhereUniqueInput!]!): [App]
  createWechatUser(data: WechatUserCreateInput!): WechatUser
  createWechatUsers(data: [WechatUserCreateInput!]!): [WechatUser]
  updateWechatUser(where: WechatUserWhereUniqueInput!, data: WechatUserUpdateInput!): WechatUser
  updateWechatUsers(data: [WechatUserUpdateArgs!]!): [WechatUser]
  deleteWechatUser(where: WechatUserWhereUniqueInput!): WechatUser
  deleteWechatUsers(where: [WechatUserWhereUniqueInput!]!): [WechatUser]
  createProductCategory(data: ProductCategoryCreateInput!): ProductCategory
  createProductCategories(data: [ProductCategoryCreateInput!]!): [ProductCategory]
  updateProductCategory(where: ProductCategoryWhereUniqueInput!, data: ProductCategoryUpdateInput!): ProductCategory
  updateProductCategories(data: [ProductCategoryUpdateArgs!]!): [ProductCategory]
  deleteProductCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  deleteProductCategories(where: [ProductCategoryWhereUniqueInput!]!): [ProductCategory]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createCart(data: CartCreateInput!): Cart
  createCarts(data: [CartCreateInput!]!): [Cart]
  updateCart(where: CartWhereUniqueInput!, data: CartUpdateInput!): Cart
  updateCarts(data: [CartUpdateArgs!]!): [Cart]
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteCarts(where: [CartWhereUniqueInput!]!): [Cart]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(where: CartItemWhereUniqueInput!, data: CartItemUpdateInput!): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(where: ServiceWhereUniqueInput!, data: ServiceUpdateInput!): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createServiceCategory(data: ServiceCategoryCreateInput!): ServiceCategory
  createServiceCategories(data: [ServiceCategoryCreateInput!]!): [ServiceCategory]
  updateServiceCategory(where: ServiceCategoryWhereUniqueInput!, data: ServiceCategoryUpdateInput!): ServiceCategory
  updateServiceCategories(data: [ServiceCategoryUpdateArgs!]!): [ServiceCategory]
  deleteServiceCategory(where: ServiceCategoryWhereUniqueInput!): ServiceCategory
  deleteServiceCategories(where: [ServiceCategoryWhereUniqueInput!]!): [ServiceCategory]
  createEmployee(data: EmployeeCreateInput!): Employee
  createEmployees(data: [EmployeeCreateInput!]!): [Employee]
  updateEmployee(where: EmployeeWhereUniqueInput!, data: EmployeeUpdateInput!): Employee
  updateEmployees(data: [EmployeeUpdateArgs!]!): [Employee]
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteEmployees(where: [EmployeeWhereUniqueInput!]!): [Employee]
  createShop(data: ShopCreateInput!): Shop
  createShops(data: [ShopCreateInput!]!): [Shop]
  updateShop(where: ShopWhereUniqueInput!, data: ShopUpdateInput!): Shop
  updateShops(data: [ShopUpdateArgs!]!): [Shop]
  deleteShop(where: ShopWhereUniqueInput!): Shop
  deleteShops(where: [ShopWhereUniqueInput!]!): [Shop]
  createCardType(data: CardTypeCreateInput!): CardType
  createCardTypes(data: [CardTypeCreateInput!]!): [CardType]
  updateCardType(where: CardTypeWhereUniqueInput!, data: CardTypeUpdateInput!): CardType
  updateCardTypes(data: [CardTypeUpdateArgs!]!): [CardType]
  deleteCardType(where: CardTypeWhereUniqueInput!): CardType
  deleteCardTypes(where: [CardTypeWhereUniqueInput!]!): [CardType]
  createMembershipCard(data: MembershipCardCreateInput!): MembershipCard
  createMembershipCards(data: [MembershipCardCreateInput!]!): [MembershipCard]
  updateMembershipCard(where: MembershipCardWhereUniqueInput!, data: MembershipCardUpdateInput!): MembershipCard
  updateMembershipCards(data: [MembershipCardUpdateArgs!]!): [MembershipCard]
  deleteMembershipCard(where: MembershipCardWhereUniqueInput!): MembershipCard
  deleteMembershipCards(where: [MembershipCardWhereUniqueInput!]!): [MembershipCard]
  createCardConsumptionRecord(data: CardConsumptionRecordCreateInput!): CardConsumptionRecord
  createCardConsumptionRecords(data: [CardConsumptionRecordCreateInput!]!): [CardConsumptionRecord]
  updateCardConsumptionRecord(where: CardConsumptionRecordWhereUniqueInput!, data: CardConsumptionRecordUpdateInput!): CardConsumptionRecord
  updateCardConsumptionRecords(data: [CardConsumptionRecordUpdateArgs!]!): [CardConsumptionRecord]
  deleteCardConsumptionRecord(where: CardConsumptionRecordWhereUniqueInput!): CardConsumptionRecord
  deleteCardConsumptionRecords(where: [CardConsumptionRecordWhereUniqueInput!]!): [CardConsumptionRecord]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createAlbum(data: AlbumCreateInput!): Album
  createAlbums(data: [AlbumCreateInput!]!): [Album]
  updateAlbum(where: AlbumWhereUniqueInput!, data: AlbumUpdateInput!): Album
  updateAlbums(data: [AlbumUpdateArgs!]!): [Album]
  deleteAlbum(where: AlbumWhereUniqueInput!): Album
  deleteAlbums(where: [AlbumWhereUniqueInput!]!): [Album]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  wechatLogin(code: String!): WechatLoginResponse
}

type WechatLoginResponse {
  token: String
  user: AuthUser
}

type AuthUser {
  id: String
  name: String
  email: String
  phone: String
  sessionKey: String
  openId: String
  unionId: String
  nickname: String
  avatarUrl: String
  gender: Int
  birthday: String
  createdAt: String
  lastLoginAt: String
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  article(where: ArticleWhereUniqueInput!): Article
  articles(where: ArticleWhereInput! = {}, orderBy: [ArticleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ArticleWhereUniqueInput): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  menu(where: MenuWhereUniqueInput!): Menu
  menus(where: MenuWhereInput! = {}, orderBy: [MenuOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MenuWhereUniqueInput): [Menu!]
  menusCount(where: MenuWhereInput! = {}): Int
  app(where: AppWhereUniqueInput!): App
  apps(where: AppWhereInput! = {}, orderBy: [AppOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AppWhereUniqueInput): [App!]
  appsCount(where: AppWhereInput! = {}): Int
  wechatUser(where: WechatUserWhereUniqueInput!): WechatUser
  wechatUsers(where: WechatUserWhereInput! = {}, orderBy: [WechatUserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WechatUserWhereUniqueInput): [WechatUser!]
  wechatUsersCount(where: WechatUserWhereInput! = {}): Int
  productCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  productCategories(where: ProductCategoryWhereInput! = {}, orderBy: [ProductCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductCategoryWhereUniqueInput): [ProductCategory!]
  productCategoriesCount(where: ProductCategoryWhereInput! = {}): Int
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  cart(where: CartWhereUniqueInput!): Cart
  carts(where: CartWhereInput! = {}, orderBy: [CartOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CartWhereUniqueInput): [Cart!]
  cartsCount(where: CartWhereInput! = {}): Int
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItems(where: CartItemWhereInput! = {}, orderBy: [CartItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CartItemWhereUniqueInput): [CartItem!]
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  serviceCategory(where: ServiceCategoryWhereUniqueInput!): ServiceCategory
  serviceCategories(where: ServiceCategoryWhereInput! = {}, orderBy: [ServiceCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceCategoryWhereUniqueInput): [ServiceCategory!]
  serviceCategoriesCount(where: ServiceCategoryWhereInput! = {}): Int
  employee(where: EmployeeWhereUniqueInput!): Employee
  employees(where: EmployeeWhereInput! = {}, orderBy: [EmployeeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EmployeeWhereUniqueInput): [Employee!]
  employeesCount(where: EmployeeWhereInput! = {}): Int
  shop(where: ShopWhereUniqueInput!): Shop
  shops(where: ShopWhereInput! = {}, orderBy: [ShopOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ShopWhereUniqueInput): [Shop!]
  shopsCount(where: ShopWhereInput! = {}): Int
  cardType(where: CardTypeWhereUniqueInput!): CardType
  cardTypes(where: CardTypeWhereInput! = {}, orderBy: [CardTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CardTypeWhereUniqueInput): [CardType!]
  cardTypesCount(where: CardTypeWhereInput! = {}): Int
  membershipCard(where: MembershipCardWhereUniqueInput!): MembershipCard
  membershipCards(where: MembershipCardWhereInput! = {}, orderBy: [MembershipCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MembershipCardWhereUniqueInput): [MembershipCard!]
  membershipCardsCount(where: MembershipCardWhereInput! = {}): Int
  cardConsumptionRecord(where: CardConsumptionRecordWhereUniqueInput!): CardConsumptionRecord
  cardConsumptionRecords(where: CardConsumptionRecordWhereInput! = {}, orderBy: [CardConsumptionRecordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CardConsumptionRecordWhereUniqueInput): [CardConsumptionRecord!]
  cardConsumptionRecordsCount(where: CardConsumptionRecordWhereInput! = {}): Int
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  album(where: AlbumWhereUniqueInput!): Album
  albums(where: AlbumWhereInput! = {}, orderBy: [AlbumOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AlbumWhereUniqueInput): [Album!]
  albumsCount(where: AlbumWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: User
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  description: String
  label: String!
  labelField: String!
  singular: String!
  plural: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  pageSize: Int!
  listType: String!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  initialFilter: JSON
  isSingleton: Boolean!
  hideNavigation: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: JSON!
  isRequired: JSON!
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: JSON!
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition!
  isRequired: JSON!
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
