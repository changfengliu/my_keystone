// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "mysql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                       String           @id @default(cuid())
  name                     String           @default("")
  nickname                 String           @default("")
  phone                    String           @unique @default("")
  email                    String           @unique @default("")
  avatar_id                String?
  avatar_extension         String?
  avatar_filesize          Int?
  avatar_width             Int?
  avatar_height            Int?
  gender                   Int              @default(0)
  birthday                 DateTime?
  password                 String
  openid                   String           @default("")
  createdAt                DateTime?        @default(now())
  lastLoginAt              DateTime?        @default(now())
  address                  String           @default("")
  remark                   String           @default("")
  userType                 String           @default("admin")
  status                   Int              @default(1)
  lastLoginIP              String           @default("")
  loginCount               Int?             @default(0)
  from_Article_author      Article[]        @relation("Article_author")
  from_WechatUser_user     WechatUser[]     @relation("WechatUser_user")
  from_Cart_user           Cart[]           @relation("Cart_user")
  from_MembershipCard_user MembershipCard[] @relation("MembershipCard_user")
}

model Article {
  id          String    @id @default(cuid())
  title       String    @default("")
  content     Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishedAt DateTime?
  status      String?   @default("draft")
  author      User?     @relation("Article_author", fields: [authorId], references: [id])
  authorId    String?   @map("author")
  tags        Tag[]     @relation("Article_tags")

  @@index([authorId])
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @default("")
  posts Article[] @relation("Article_tags")
}

model Menu {
  id               String  @id @default(cuid())
  name             String  @default("")
  icon             String  @default("")
  type             String? @default("item")
  path             String  @default("")
  parent           Menu?   @relation("Menu_parent", fields: [parentId], references: [id])
  parentId         String? @map("parent")
  sort             Int?    @default(0)
  isEnabled        Int?    @default(1)
  from_Menu_parent Menu[]  @relation("Menu_parent")

  @@index([parentId])
}

model WechatUser {
  id         String  @id @default(cuid())
  openid     String  @unique @default("")
  unionid    String  @default("")
  sessionKey String  @default("")
  user       User?   @relation("WechatUser_user", fields: [userId], references: [id])
  userId     String? @map("user")

  @@index([userId])
}

model ProductCategory {
  id                                  String            @id @default(cuid())
  name                                String            @unique @default("")
  description                         String            @default("")
  status                              String?           @default("active")
  order                               Int?              @default(0)
  parentCategory                      ProductCategory?  @relation("ProductCategory_parentCategory", fields: [parentCategoryId], references: [id])
  parentCategoryId                    String?           @map("parentCategory")
  from_ProductCategory_parentCategory ProductCategory[] @relation("ProductCategory_parentCategory")
  from_Product_category               Product[]         @relation("Product_category")

  @@index([parentCategoryId])
}

model Product {
  id                    String           @id @default(cuid())
  name                  String           @unique @default("")
  sku                   String           @unique @default("")
  price                 Int
  stock                 Int              @default(0)
  category              ProductCategory? @relation("Product_category", fields: [categoryId], references: [id])
  categoryId            String?          @map("category")
  status                String?          @default("active")
  cover_id              String?
  cover_extension       String?
  cover_filesize        Int?
  cover_width           Int?
  cover_height          Int?
  images                Image[]          @relation("Product_images")
  description           Json             @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  order                 Int?             @default(0)
  from_CartItem_product CartItem[]       @relation("CartItem_product")

  @@index([categoryId])
}

model Cart {
  id                 String     @id @default(cuid())
  user               User?      @relation("Cart_user", fields: [userId], references: [id])
  userId             String?    @map("user")
  items              CartItem[] @relation("Cart_items")
  totalAmount        Int?
  status             String?    @default("active")
  updatedAt          DateTime?  @default(now())
  from_CartItem_cart CartItem[] @relation("CartItem_cart")

  @@index([userId])
}

model CartItem {
  id              String   @id @default(cuid())
  cart            Cart?    @relation("CartItem_cart", fields: [cartId], references: [id])
  cartId          String?  @map("cart")
  product         Product? @relation("CartItem_product", fields: [productId], references: [id])
  productId       String?  @map("product")
  quantity        Int      @default(1)
  price           Int
  amount          Int
  from_Cart_items Cart[]   @relation("Cart_items")

  @@index([cartId])
  @@index([productId])
}

model Service {
  id                                 String                  @id @default(cuid())
  title                              String                  @unique @default("")
  price                              Int
  duration                           Int                     @default(60)
  status                             String?                 @default("draft")
  serviceCategory                    ServiceCategory?        @relation("Service_serviceCategory", fields: [serviceCategoryId], references: [id])
  serviceCategoryId                  String?                 @map("serviceCategory")
  order                              Int                     @default(0)
  cover_id                           String?
  cover_extension                    String?
  cover_filesize                     Int?
  cover_width                        Int?
  cover_height                       Int?
  images                             Image[]                 @relation("Service_images")
  content                            Json                    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  from_CardConsumptionRecord_service CardConsumptionRecord[] @relation("CardConsumptionRecord_service")

  @@index([serviceCategoryId])
}

model ServiceCategory {
  id                           String    @id @default(cuid())
  name                         String    @unique @default("")
  status                       String?   @default("draft")
  order                        Int       @default(0)
  from_Service_serviceCategory Service[] @relation("Service_serviceCategory")
}

model Employee {
  id               String    @id @default(cuid())
  name             String    @default("")
  phone            String    @unique @default("")
  avatar_id        String?
  avatar_extension String?
  avatar_filesize  Int?
  avatar_width     Int?
  avatar_height    Int?
  shop             Shop?     @relation("Employee_shop", fields: [shopId], references: [id])
  shopId           String?   @map("shop")
  role             String?   @default("beautician")
  status           String?   @default("active")
  skills           String    @default("")
  joinDate         DateTime? @default(now())
  leaveDate        DateTime?
  remark           String    @default("")

  @@index([shopId])
}

model Shop {
  id                 String     @id @default(cuid())
  name               String     @unique @default("")
  address            String     @default("")
  phone              String     @default("")
  location           String     @default("")
  locationLabel      String     @default("")
  parent             Shop?      @relation("Shop_parent", fields: [parentId], references: [id])
  parentId           String?    @map("parent")
  subShops           Shop[]     @relation("Shop_parent")
  logo_id            String?
  logo_extension     String?
  logo_filesize      Int?
  logo_width         Int?
  logo_height        Int?
  banners            Image[]    @relation("Shop_banners")
  openingHours       String     @default("")
  remark             String     @default("")
  from_Employee_shop Employee[] @relation("Employee_shop")

  @@index([parentId])
}

model CardType {
  id                           String           @id @default(cuid())
  name                         String           @unique @default("")
  type                         String
  cover_id                     String?
  cover_extension              String?
  cover_filesize               Int?
  cover_width                  Int?
  cover_height                 Int?
  price                        Int
  count                        Int?
  discount                     Int?
  duration                     Int?
  rules                        Json?
  status                       String           @default("draft")
  description                  String           @default("")
  from_MembershipCard_cardType MembershipCard[] @relation("MembershipCard_cardType")
}

model MembershipCard {
  id                              String                  @id @default(cuid())
  user                            User?                   @relation("MembershipCard_user", fields: [userId], references: [id])
  userId                          String?                 @map("user")
  cardType                        CardType?               @relation("MembershipCard_cardType", fields: [cardTypeId], references: [id])
  cardTypeId                      String?                 @map("cardType")
  balance                         Int?
  remainingCount                  Int?                    @default(0)
  status                          String                  @default("active")
  expiryDate                      DateTime?
  purchaseDate                    DateTime?               @default(now())
  from_CardConsumptionRecord_card CardConsumptionRecord[] @relation("CardConsumptionRecord_card")

  @@index([userId])
  @@index([cardTypeId])
}

model CardConsumptionRecord {
  id               String          @id @default(cuid())
  card             MembershipCard? @relation("CardConsumptionRecord_card", fields: [cardId], references: [id])
  cardId           String?         @map("card")
  service          Service?        @relation("CardConsumptionRecord_service", fields: [serviceId], references: [id])
  serviceId        String?         @map("service")
  originalAmount   Int
  discountedAmount Int
  consumedCount    Int?            @default(1)
  consumedAt       DateTime?       @default(now())
  note             String          @default("")

  @@index([cardId])
  @@index([serviceId])
}

model Image {
  id                  String    @id @default(cuid())
  name                String    @default("")
  altText             String    @default("")
  image_id            String?
  image_extension     String?
  image_filesize      Int?
  image_width         Int?
  image_height        Int?
  from_Product_images Product[] @relation("Product_images")
  from_Service_images Service[] @relation("Service_images")
  from_Shop_banners   Shop[]    @relation("Shop_banners")
  from_Album_images   Album[]   @relation("Album_images")
}

model Album {
  id              String  @id @default(cuid())
  name            String  @default("")
  desc            String  @default("")
  cover_id        String?
  cover_extension String?
  cover_filesize  Int?
  cover_width     Int?
  cover_height    Int?
  images          Image[] @relation("Album_images")
}
